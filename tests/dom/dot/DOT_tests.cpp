#include "gtest/gtest.h"
#include "../../../src/dom/dot/DOT.h"

//class DOT_Tests : public testing::Test {
//  protected:
//    void SetUp() override { dot = std::make_unique<blogator::dom::DOT>(); }
//    void TearDown() override {}
//  public:
//    std::unique_ptr<blogator::dom::DOT> dot;
//};

//TEST_F( DOT_Tests, getSpecs ) {
//    using blogator::dom::html5::Tag;
//    using blogator::dom::html5::TagStructure;
//
//    auto p1 = dot->getSpecs( blogator::html::dom::HtmlTag::Type::A );
//    ASSERT_EQ( Structure::PAIRED, p1->structure );
//    ASSERT_EQ( "<a" ,p1->opening_begin );
//    ASSERT_EQ( ">" ,p1->opening_end );
//    ASSERT_EQ( "</a>" ,p1->closing );
//    auto p2 = dot->getSpecs( blogator::html::dom::HtmlTag::Type::A );
//    ASSERT_EQ( p1, p2 );
//}

TEST( DOT_Tests, constructor_injector ) {
    using blogator::dom::DOT;
    using blogator::dom::DOTNode;
    using blogator::dom::html5::Tag;

    auto root = std::make_unique<DOTNode>( Tag::HTML );
    auto &n1  = root->addChild( std::make_unique<DOTNode>( Tag::BODY ) );
    auto &n2  = n1.addChild( std::make_unique<DOTNode>( Tag::H1, U"Test heading" ) );
    auto &n3  = n1.addChild( std::make_unique<DOTNode>( Tag::UL ) );
    n3.addAttribute( U"class", U"my-ul" );
    auto &n4  = n3.addChild( std::make_unique<DOTNode>( Tag::LI ) );
    n3.addChild( std::make_unique<DOTNode>( Tag::LI, U"list item 2" ));
    n3.addChild( std::make_unique<DOTNode>( Tag::LI, U"list item 3" ));
    n4.addAttribute( U"id", U"link1" );
    n4.addAttribute( U"class", U"my-li" );
    auto &n5  = n4.addChild( std::make_unique<DOTNode>( Tag::A, U"Click here!" ) );
    n5.addAttribute( U"href", U"http://start.duckduckgo.com" );
    n5.addAttribute( U"class", U"my-link" );
    n5.addAttribute( U"class", U"nested-link" );

    auto dot = DOT( std::move( root ) );

    std::string expected = "<html><body><h1>Test heading</h1><ul class=\"my-ul\"><li class=\"my-li\" id=\"link1\"><a class=\"my-link nested-link\" href=\"http://start.duckduckgo.com\">Click here!</a></li><li>list item 2</li><li>list item 3</li></ul></body></html>";
    std::stringstream ss;
    ss << dot;
    ASSERT_EQ( expected, ss.str() );

    auto v_el = dot.getElementByClass( U"nested-link" );
    auto &el  = dot.getElementById( U"link1" );

    std::cout << el << std::endl;
    std::cout << *v_el.at( 0 ) << std::endl;
    ASSERT_EQ( el, *( v_el.at( 0 )->parent() ) );
}

TEST( DOT_Tests, constructor_parse ) {
    const std::string html = "\n"
                             "<!-- Generated with Blogator 1.3.2 (https://an7ar35.bitbucket.io) -->\n"
                             "<!DOCTYPE html>\n"
                             "<html lang=\"en\">\n"
                             "<head>\n"
                             "    <meta charset=\"UTF-8\">\n"
                             "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n"
                             "    <title>EAD | Writings</title>\n"
                             "    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"../favicon.ico\" />\n"
                             "    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/main.css\" />\n"
                             "    <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/blogator/main.css\" />\n"
                             "</head>\n"
                             "    <body>\n"
                             "        <div class=\"header\">\n"
                             "            <div><img src=\"../img/tree-left.svg\" alt=\"left tree\"/></div>\n"
                             "            <div>\n"
                             "                <div class=\"site-title\">Es' corner</div>\n"
                             "                <div class=\"site-micro-title\">Just another keyboard-enthusiastic hominid.</div>\n"
                             "            </div>\n"
                             "            <div><img src=\"../img/tree-right.svg\" alt=\"right tree\"/></div>\n"
                             "        </div>\n"
                             "        <nav class=\"navigation\">\n"
                             "            <ul>\n"
                             "                <li class=\"active\">\n"
                             "                    <a class=\"nav-writings\" href=\"../index.html\">\n"
                             "                        <div class=\"nav-icon\"></div>\n"
                             "                        <div class=\"nav-text\">Home</div>\n"
                             "                    </a>\n"
                             "                </li>\n"
                             "                <li>\n"
                             "                    <a class=\"nav-projects\" href=\"../pages/projects/personal.html\">\n"
                             "                        <div class=\"nav-icon\"></div>\n"
                             "                        <div class=\"nav-text\">Projects</div>\n"
                             "                    </a>\n"
                             "                </li>\n"
                             "                <li>\n"
                             "                    <a class=\"nav-cv\" href=\"../pages/cv.html\">\n"
                             "                        <div class=\"nav-icon\"></div>\n"
                             "                        <div class=\"nav-text\">Résumé</div>\n"
                             "                    </a>\n"
                             "                </li>\n"
                             "                <li>\n"
                             "                    <a class=\"nav-contact\" href=\"../pages/contact.html\">\n"
                             "                        <div class=\"nav-icon\"></div>\n"
                             "                        <div class=\"nav-text\">Contact</div>\n"
                             "                    </a>\n"
                             "                </li>\n"
                             "            </ul>\n"
                             "        </nav>\n"
                             "        <script src=\"../js/sticky-top-navbar.js\"></script>\n"
                             "\n"
                             "        <div class=\"breadcrumb\">\n"
                             "        \t<ul>\n"
                             "        \t\t<li><a href=\"../index.html\">Home</a></li>\n"
                             "        \t\t<li><a href=\"../index/by_date/0.html\">Posts</a></li>\n"
                             "        \t\t<li>Indexed search with Javascript</li>\n"
                             "        \t</ul>\n"
                             "        </div>\n"
                             "\n"
                             "        <div class=\"content-h\">\n"
                             "            <div class=\"left-col\">\n"
                             "                <div class=\"post-content\">\n"
                             "\n"
                             "<article>\n"
                             "    <div>\n"
                             "        <h1><span class=\"title\">Indexed search with Javascript</span></h1>\n"
                             "        <time datetime=\"2020-06-16\">16 June 2020</time>\n"
                             "        <div class=\"authors\">\n"
                             "            <span class=\"author\">Es</span>\n"
                             "        </div>\n"
                             "        <div class=\"tags\">\n"
                             "            <span class=\"tag\">Algorithm</span>\n"
                             "            <span class=\"tag\">Data Structure</span>\n"
                             "            <span class=\"tag\">Javascript</span>\n"
                             "        </div>\n"
                             "    </div>\n"
                             "    <div class=\"post-text\">\n"
                             "\n"
                             "        <div class=\"auto-toc\">\n"
                             "        \t<h2>Table of Contents</h2>\n"
                             "        \t<ol>\n"
                             "        \t\t<li><a href=\"#heading_1\">1. The goals</a></li>\n"
                             "        \t\t<li><a href=\"#heading_2\">2. The approach</a></li>\n"
                             "        \t\t<li><ol>\n"
                             "        \t\t\t<li><a href=\"#heading_2_1\">2.1 Data-structure</a></li>\n"
                             "        \t\t\t<li><a href=\"#heading_2_2\">2.2 Populating the grove</a></li>\n"
                             "        \t\t\t<li><a href=\"#heading_2_3\">2.3 Parsing search strings</a></li>\n"
                             "        \t\t\t<li><a href=\"#heading_2_4\">2.4 Output</a></li>\n"
                             "        \t\t\t<li><ol>\n"
                             "        \t\t\t\t<li><a href=\"#heading_2_4_1\">2.4.1 Filtering</a></li>\n"
                             "        \t\t\t\t<li><a href=\"#heading_2_4_2\">2.4.2 DOM injection</a></li>\n"
                             "        \t\t\t</ol></li>\n"
                             "        \t\t\t<li><a href=\"#heading_2_5\">2.5 Graceful failure</a></li>\n"
                             "        \t\t</ol></li>\n"
                             "        \t\t<li><a href=\"#heading_3\">3. Additions</a></li>\n"
                             "        \t\t<li><ol>\n"
                             "        \t\t\t<li><a href=\"#heading_3_1\">3.1 Passing query to the URL</a></li>\n"
                             "        \t\t\t<li><a href=\"#heading_3_2\">3.2 New category</a></li>\n"
                             "        \t\t</ol></li>\n"
                             "        \t\t<li><a href=\"#heading_4\">4. Final thoughts</a></li>\n"
                             "        \t</ol>\n"
                             "        </div>\n"
                             "\n"
                             "        <p><span class=\"summary\">It started with an idea: \"Wouldn't it be nice to have a search functionality on my blog?\". Sure, nowadays there are many libraries and external sites such as Google offering this in some form or other. But, as far as my personal projects are concerned, I am not one to be satiated with a solution that would likely involve said third party injecting hell-knows-what into my little home-brew site. Even if that was an option it would probably be overkill for what I actually need.</span></p>\n"
                             "\n"
                             "        <p>Other reasons for doing it from scratch are firstly \"why not?\" and secondly an opportunity to flex my rather atrophied javascript muscle. Last I did anything related to it was 2013 so might as well say the Cambrian era...</p>\n"
                             "\n"
                             "        <h2 id=\"heading_1\">1. The goals</h2>\n"
                             "\n"
                             "        <p>So what's the end game here? Defining goals early on helps keep the scope from ever-expanding during implementation. It is always tempting to explore more than is actually needed and get so spread out that the project gets never finished becoming a time sink with a slice of guilt attached to it as a bonus.</p>\n"
                             "\n"
                             "        <p>As the search will execute entirely on the client side some considerations must be made towards having descent performance. As this site doesn't have, nor will likely have, 20,000 articles it should be relatively easy to have snippy responses to searches.</p>\n"
                             "\n"
                             "        <p>The requirements:</p>\n"
                             "        <ol>\n"
                             "            <li>site-local solution that runs entirely on the client</li>\n"
                             "            <li>results based on the <code class=\"inline terminal\">index.json</code> file generated by Blogator</li>\n"
                             "            <li>result pool generated at least from:<ul>\n"
                             "                <li>article's title,</li>\n"
                             "                <li>article's tags,</li>\n"
                             "                <li>tag names.</li>\n"
                             "            </ul></li>\n"
                             "            <li>result filtering for blog article and tags (maybe even projects as an extra)</li>\n"
                             "            <li>accept both exact and partial words in a search string</li>\n"
                             "            <li>case-insensitive search</li>\n"
                             "            <li>no duplication in results</li>\n"
                             "            <li>multiple word matches (individual word result set intersection &cap;)</li>\n"
                             "            <li>graceful failure when Javascript is disabled in the client browser</li>\n"
                             "        </ol>\n"
                             "\n"
                             "        <h2 id=\"heading_2\">2. The approach</h2>\n"
                             "\n"
                             "        <p>The structure of the source JSON generated by Blogator is as follows:</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"block terminal-bg\">{\n"
                             "    \"articles\": [\n"
                             "        {\n"
                             "            \"title\"   : \"...\",\n"
                             "            \"date\"    : \"...\",\n"
                             "            \"authors\" : [ \"...\" ],\n"
                             "            \"tags\"    : [ \"...\" ],\n"
                             "            \"headings\": [ \"...\" ],\n"
                             "            \"href\"    : \"...\"\n"
                             "        },\n"
                             "        ...\n"
                             "    ],\n"
                             "    \"tags\": [\n"
                             "        {\n"
                             "            \"name\": \"...\",\n"
                             "            \"href\": \"...\"\n"
                             "        },\n"
                             "        ...\n"
                             "    ]\n"
                             "}</code>\n"
                             "        </div>\n"
                             "\n"
                             "        <p>As the solution needs to differentiate between categories (articles/tags) the JSON index can be parsed as-is without further manipulations and kept in memory as the source reference. The work will mainly be on creating a searchable index and getting the results out based on the words given in the search string.</p>\n"
                             "\n"
                             "        <h3 id=\"heading_2_1\">2.1 Data-structure</h3>\n"
                             "\n"
                             "        <p>Since it would be pretty cool to have a sort of \"auto-complete\" feature which fills up results as a query is typed I've gone with a collection of tree data-structure which I'm calling a \"<i>grove</i>\"<sup>[1]</sup> since there won't be such a large number of trees as to call it a <i>forest</i>... (arborism related joke &#9786;)</p>\n"
                             "\n"
                             "        <p>This <i>grove</i> contains the root nodes of the trees. Each tree represent a group of words sharing the same starting letter. Meaning that each tree can efficiently hold multiple words that stem from the same root letter or share the same prefix. Each node is identified with a single letter and can link back to sources as well as have any number of children connected to it.</p>\n"
                             "\n"
                             "        <p>Let's go with an example. Here we have a collection of words that can be grouped into 2 trees: one with a root node '<code class=\"inline terminal\">b</code>' and the other with a root node of '<code class=\"inline terminal\">h</code>':</p>\n"
                             "\n"
                             "        <ul>\n"
                             "            <li><b>blog</b> (tag)</li>\n"
                             "            <li><b>blogator</b> (articles)</li>\n"
                             "            <li><b>hell</b> (articles and tag)</li>\n"
                             "            <li><b>hello</b> (articles)</li>\n"
                             "            <li><b>hellraiser</b> (articles)</li>\n"
                             "            <li><b>help</b> (tag)</li>\n"
                             "        </ul>\n"
                             "\n"
                             "        <p>Visually it will look like this:</p>\n"
                             "\n"
                             "        <figure class=\"center\">\n"
                             "            <a href=\"../source/2020/Indexed%20search%20in%20JS/grove_example.svg\"><img src=\"../source/2020/Indexed%20search%20in%20JS/grove_example.svg\" alt=\"Tree based search\"/></a>\n"
                             "            <figcaption>Tree-based searching</figcaption>\n"
                             "        </figure>\n"
                             "\n"
                             "        <p>When transversing a tree from root to all the leaf nodes, all words can be listed. This means that sources of words with a shared prefix can be collected using a recursive function.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">accumulateResults = function( node, articles, tags ) {\n"
                             "    gatherNodeResults( node, articles, tags );\n"
                             "\n"
                             "    node.child_nodes.forEach(\n"
                             "        ( value ) => { this.accumulateResults( value, articles, tags, projects ); }\n"
                             "    );\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">Recursive tree transversal</div>\n"
                             "\n"
                             "        <p>For a descent average case performance (<code class=\"inline\">O(1)</code> access), children are held in associative array (Maps) whose key are the next possible character for an indexed word.</p>\n"
                             "\n"
                             "        <p>Where applicable, nodes hold references to the articles/tags that are related to the word assembled by traversing the tree from root to said node.</p>\n"
                             "\n"
                             "        <p>It's important to note that this approach would not be so great with very large data-sets of lexically different words. The size of the grove and complexity of the trees therein would lead to a longer construction, an increase in the memory footprint, and also have a negative impact on recursive accumulation of matches. The latter could be mitigated by restricting search results to exact matches but that would get rid of the auto-complete feature (the main attraction with this approach).</p>\n"
                             "\n"
                             "        <p>Thankfully the number and lexical diversity of the words contained in headings and tags of this subject-specific blog are not that huge.</p>\n"
                             "\n"
                             "        <p class=\"footnote\"><sup>[1]</sup> A grove is a small group of trees.</p>\n"
                             "\n"
                             "        <h3 id=\"heading_2_2\">2.2 Populating the grove</h3>\n"
                             "\n"
                             "        <p>Adding words to the <i>grove</i> is pretty straightforward with this setup. First, words from a source must be extracted then converted to lowercase (case-insensitive search) and, finally, any duplicates removed. Duplicates can be taken care with just using a  <code class=\"inline terminal\">Set</code> to store the extracted words.</p>\n"
                             "\n"
                             "            <p>All that's left afterwards is to iterate through the characters on each word whilst transversing the tree at the same time and adding nodes where needed until the last character is reached. Then a reference to the source is added to the corresponding node.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">Grove.prototype.addWord = function( src_ref, src_type, word, node ) {\n"
                             "    if( word === '' )\n"
                             "        return;\n"
                             "\n"
                             "    const c = word.charAt( 0 );\n"
                             "\n"
                             "    if( !node.children.has( c ) )\n"
                             "        node.children.set( c, new Node() );\n"
                             "\n"
                             "    let next_node = node.children.get( c );\n"
                             "\n"
                             "    if( word.length > 1 ) {\n"
                             "        this.addWord( src_ref, src_type, word.slice( 1 ), next_node );\n"
                             "\n"
                             "    } else { //i.e.: last char in word\n"
                             "        if( src_type === \"article\" )\n"
                             "            next_node.articles_src.push( src_ref );\n"
                             "        if( src_type === \"tag\"\" )\n"
                             "            next_node.tags_src.push( src_ref );\n"
                             "    }\n"
                             "};\n"
                             "\n"
                             "Grove.prototype.addGroveTree = function( word, src_ref, src_type ) {\n"
                             "    if( word.length < 2 )\n"
                             "        return;\n"
                             "\n"
                             "    const c = word.charAt( 0 );\n"
                             "\n"
                             "    if( !this.trees.has( c ) )\n"
                             "        this.trees.set( c, new Node() );\n"
                             "\n"
                             "    this.addWord( src_ref, src_type, word.slice( 1 ), this.trees.get( c ) );\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">Recursive word adding for the Grove.</div>\n"
                             "\n"
                             "        <h3 id=\"heading_2_3\">2.3 Parsing search strings</h3>\n"
                             "\n"
                             "        <p>Search string can be <code class=\"inline\">1..n</code> words in length that can either result in partial and exact matches or just exact matches alone. So essentially there are 3 sub-problems to solve here:</p>\n"
                             "\n"
                             "        <ol>\n"
                             "            <li>how to recognise and deal with partial words</li>\n"
                             "            <li>how to recognise and deal with exact words</li>\n"
                             "            <li>how to recognise and deal with multiple words that can each be either partial or exact</li>\n"
                             "        </ol>\n"
                             "\n"
                             "        <p>For the sake of simplicity words that should return exact matches <b>only</b> will have double quotation marks <code class=\"inline\">\"\"</code>. No quotation marks should return any sources that has an exact match or has word(s) whose prefix match the given word. As for multiple words, a space will act as a list delimiter in the search string. As examples:</p>\n"
                             "\n"
                             "        <ol>\n"
                             "            <li>partial matches: <code class=\"inline\">java</code></li>\n"
                             "            <li>exact matches: <code class=\"inline\">\"java\"</code></li>\n"
                             "            <li>word set intersection matches (&cap;): <code class=\"inline\">java \"notes\"</code></li>\n"
                             "        </ol>\n"
                             "\n"
                             "        <p>To begin dealing with all of that, the search string needs to be split into its individual words then each of these need to be checked for quotation marks (regex helps here). Based on the result of the check, words can be put into 1 of 2 sets: exact and partial words.</p>\n"
                             "\n"
                             "        <p>With these two sets, the search can begin for each of the words. As there are two source categories (articles and tags), their results are kept apart to allow category-based filtering on output later on. All results for words can be put into individual sets that are, in turn, stored in arrays.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">let article_sets = [];\n"
                             "let tag_sets     = [];\n"
                             "\n"
                             "for( let i = 0; i < exact_words.length; ++i ) {\n"
                             "    let a = article_sets.push( new Set() ) - 1;\n"
                             "    let t = tag_sets.push( new Set() ) - 1;\n"
                             "\n"
                             "    getExactResults( exact_words[i], article_sets[a], tag_sets[t] );\n"
                             "}\n"
                             "\n"
                             "for( let i = 0; i < partial_words.length; ++i ) {\n"
                             "    let a = article_sets.push( new Set() ) - 1;\n"
                             "    let t = tag_sets.push( new Set() ) - 1;\n"
                             "\n"
                             "    getPartialResults( partial_words[i], article_sets[a], tag_sets[t] );\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">Getting each of the word's matches</div>\n"
                             "\n"
                             "        <p>In the case where there was only 1 word in total from both the partial and exact word sets, then any result gathered is returned. When there are more than 1 word total a set intersection must be made from all different result sets in the arrays (<code class=\"inline\">article_sets</code> and <code class=\"inline\">tag_sets</code>).</p>\n"
                             "\n"
                             "        <p>The easiest way to to that is just to take the first set in the array, iterate over it and check each item for existence in the other sets. If one doesn't exist (i.e.: intersects) then we can do an early return as there won't be any results.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">if( article_sets.length ) {\n"
                             "    article_sets[0].forEach( value => {\n"
                             "        for( let i = 0; i < article_sets.length; ++i ) {\n"
                             "            if( !article_sets[i].has( value ) )\n"
                             "                return;\n"
                             "        }\n"
                             "        article_results.push( value );\n"
                             "    } );\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">Set intersection checking</div>\n"
                             "\n"
                             "        <h3 id=\"heading_2_4\">2.4 Output</h3>\n"
                             "\n"
                             "        <p>The search has completed and there are arrays of source reference (article and tag) that match. What now?</p>\n"
                             "\n"
                             "        <h4 id=\"heading_2_4_1\">2.4.1 Filtering</h4>\n"
                             "\n"
                             "        <p>For filtering purposes the results can be inserted into different containers (<code class=\"inline\">article-results</code>, <code class=\"inline\">tag-results</code>). This way they can be shown/hidden with the help of a tick box and an <code class=\"inline\">onclick</code> call to a js method that sets the display properties.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">showSearchResults = function( cat ) {\n"
                             "    const article_wrapper = document.getElementById( \"article-results\" );\n"
                             "    const article_opt     = document.getElementById( \"show-articles\" );\n"
                             "    const tag_div         = document.getElementById( \"tag-results-out\" );\n"
                             "    const tag_opt         = document.getElementById( \"show-tags\" );\n"
                             "\n"
                             "    switch ( cat ) {\n"
                             "        case \"articles\": {\n"
                             "            if( article_opt.checked )\n"
                             "                article_wrapper.style.display = 'flex';\n"
                             "            else\n"
                             "                article_wrapper.style.display = 'none';\n"
                             "            break;\n"
                             "        }\n"
                             "        case \"tags\": {\n"
                             "            if( tag_opt.checked )\n"
                             "                tag_div.style.display = 'flex';\n"
                             "            else\n"
                             "                tag_div.style.display = 'none';\n"
                             "            break;\n"
                             "        }\n"
                             "    }\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">Method to show/hide result blocks</div>\n"
                             "\n"
                             "        <p>It's simple enough and avoids having to re-run a script.</p>\n"
                             "\n"
                             "        <h4 id=\"heading_2_4_2\">2.4.2 DOM injection</h4>\n"
                             "\n"
                             "        <p>This is where these results can finally be injected into the result <code class=\"inline\">div</code>. There are 2 ways to do that: use the proper JS DOM manipulation functions or just inject HTML code. I went for the latter just because it takes less typing and is visually easier to debug.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">populateSearchResults = function( articles, tags ) {\n"
                             "    const container_msg = document.getElementById( \"search-msg\" );\n"
                             "    const container_a   = document.getElementById( \"article-results-out\" );\n"
                             "    const container_t   = document.getElementById( \"tag-results-out\" );\n"
                             "\n"
                             "    container_a.innerHTML = \"\";\n"
                             "    container_t.innerHTML = \"\";\n"
                             "\n"
                             "    if( document.getElementById( \"show-articles\" ).checked )\n"
                             "        showSearchResults( \"articles\" );\n"
                             "\n"
                             "    if( document.getElementById( \"show-tags\" ).checked )\n"
                             "        showSearchResults( \"tags\" );\n"
                             "\n"
                             "    if( articles.length || tags.length ) {\n"
                             "\n"
                             "        articles.forEach( value => {\n"
                             "            let html = `&lt;a href=&quot;../${value.href}&quot;&gt;\n"
                             "                            &lt;div&gt;\n"
                             "                                &lt;h3&gt;${value.title}&lt;/h3&gt;\n"
                             "                                &lt;span class=&quot;date-stamp&quot;&gt;${value.date}&lt;/span&gt;\n"
                             "                            &lt;/div&gt;\n"
                             "                            &lt;div&gt;\n"
                             "                                &lt;div class=&quot;tags&quot;&gt;`\n"
                             "\n"
                             "            value.tags.forEach( tag => { html += `&lt;span class=&quot;tag&quot;&gt;${tag}&lt;/span&gt;`; } )\n"
                             "\n"
                             "            html +=             `&lt;/div&gt;\n"
                             "                            &lt;/div&gt;\n"
                             "                        &lt;/a&gt;`;\n"
                             "\n"
                             "            container_a.innerHTML += html;\n"
                             "        } );\n"
                             "\n"
                             "        tags.forEach( value => {\n"
                             "            container_t.innerHTML +=\n"
                             "                `&lt;a href=&quot;../${value.href}&quot;&gt;\n"
                             "                    &lt;h3&gt;${value.name}&lt;/h3&gt;\n"
                             "                &lt;/a&gt;`;\n"
                             "        } );\n"
                             "\n"
                             "        container_msg.style.display = 'none';\n"
                             "\n"
                             "    } else {\n"
                             "        container_msg.style.display = 'block';\n"
                             "    }\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">HTML injection of results</div>\n"
                             "\n"
                             "        <p>Each of the results are encased in a link whose '<code class=\"inline\">href</code>' is grabbed from the result's source.</p>\n"
                             "\n"
                             "        <h3 id=\"heading_2_5\">2.5 Graceful failure</h3>\n"
                             "\n"
                             "        <p>In case Javascript is disabled on the host machine a message needs to be seen explaining the situation to the operator. To do that is actually really simple: have a <code class=\"inline\">div</code> or other container with the appropriate message and have the script auto-hide it on the page load. If the script can't be run then the message stays in sight.</p>\n"
                             "\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">window.onload = function loadIndexJSON() {\n"
                             "    /* ... code to init the search 'engine' */\n"
                             "\n"
                             "    document.getElementById( \"search-msg-no-js\" ).style.display = 'none';  /* JS disabled */\n"
                             "    document.getElementById( \"search-msg\" ).style.display       = 'block'; /* JS enabled */\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">Auto-hide 'javascript disabled' message on load</div>\n"
                             "\n"
                             "        <h2 id=\"heading_3\">3. Additions</h2>\n"
                             "\n"
                             "        <h3 id=\"heading_3_1\">3.1 Passing query to the URL</h3>\n"
                             "\n"
                             "        <p>A neat thing that HTML forms with a <code class=\"inline\">GET</code> method can do is append parameters to an '<code class=\"inline\">action</code>' URL. This means that a search bar can be put anywhere on or off the site and redirect to the search page along with the search string the operator typed.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"javascript block\">&lt;form action=&quot;search.html&quot; method=&quot;GET&quot; autocomplete=&quot;off&quot;&gt;\n"
                             "    &lt;button type=&quot;submit&quot;&gt;&lt;/button&gt;\n"
                             "    &lt;label&gt;&lt;input type=&quot;text&quot; placeholder=&quot;Type search string here.&quot; name=&quot;search-string&quot; /&gt;&lt;/label&gt;\n"
                             "&lt;/form&gt;</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">HTML form on other page</div>\n"
                             "\n"
                             "<div class=\"code-wrap\">\n"
                             "    <code class=\"javascript block\">loadSearch = function() {\n"
                             "    const regex  = new RegExp( \"\\\\?search-string=(.*)\" );\n"
                             "    let   result = regex.exec( decodeURIComponent( window.location.search ) );\n"
                             "\n"
                             "    if( result && result.length > 1 )\n"
                             "        postSearchResults( result[1] );\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">JS method to grab URL search parameters</div>\n"
                             "\n"
                             "        <h3 id=\"heading_3_2\">3.2 New category</h3>\n"
                             "\n"
                             "        <p>Once the script worked without issues, the 'Projects' category was added. With the help of Blogator's JSON append functionality the <code class=\"inline terminal\">index.json</code> file can now contain the content of a project-specific JSON index so it made sense to include it in the search.</p>\n"
                             "\n"
                             "        <p>All that was left to do was to amend the code to include that extra category (node, word insertion, result accumulation and output). It does add some complexity but being able to search that category as well is worth it.</p>\n"
                             "\n"
                             "        <div class=\"code-wrap\">\n"
                             "            <code class=\"block terminal-bg\">{\n"
                             "    \"projects\": [\n"
                             "        {\n"
                             "            \"name\": \"...\",\n"
                             "            \"year\": \"...\",\n"
                             "            \"tags\": [ \"...\" ],\n"
                             "            \"meta\": [ \"...\" ],\n"
                             "            \"href\": \"...\"\n"
                             "        },\n"
                             "        ...\n"
                             "    ]\n"
                             "}</code>\n"
                             "        </div>\n"
                             "        <div class=\"caption-bottom\">Project JSON structure</div>\n"
                             "\n"
                             "        <h2 id=\"heading_4\">4. Final thoughts</h2>\n"
                             "\n"
                             "        <p>In the end the search functionality turned out to be pretty responsive and, considering it's the same on a 6 year old mobile device, it should hold up for some time yet.</p>\n"
                             "\n"
                             "        <p>There are other approaches to this problem but as far as it goes on a small site like mine here, it does a fine job for now.</p>\n"
                             "\n"
                             "        <p>For a complete look at the glory of the script here's a <a href=\"../js/find-posts.js\" rel=\"noreferrer\" target=\"_blank\">link</a> to the file.</p>\n"
                             "    </div>\n"
                             "</article>\n"
                             "                </div>\n"
                             "            </div>\n"
                             "            <div class=\"right-col\">\n"
                             "                <div class=\"page-nav\">\n"
                             "                \t<ul>\n"
                             "                \t\t<li class=\"first\"><a href=\"1.html\">|&#9664;</a></li>\n"
                             "                \t\t<li class=\"prev\"><a rel=\"prev\" href=\"21.html\">&#9664;</a></li>\n"
                             "                \t\t<li class=\"curr\">22 / 22</li>\n"
                             "                \t\t<li class=\"next\"><a class=\"disabled\" rel=\"next\" href=\"22.html\">&#9654;</a></li>\n"
                             "                \t\t<li class=\"last\"><a class=\"disabled\" href=\"22.html\">&#9654;|</a></li>\n"
                             "                \t</ul>\n"
                             "                </div>\n"
                             "\n"
                             "                <div>\n"
                             "                    <h2>By Date</h2>\n"
                             "                    <div class=\"index-pane-dates\">\n"
                             "                    \t\t<ol class=\"tree\">\n"
                             "                    \t\t\t<li><label for=\"checkbox_2020\">2020</label><input type=\"checkbox\" checked  id=\"checkbox_2020\"/>\n"
                             "                    \t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_202006\">June</label><input type=\"checkbox\" checked  id=\"checkbox_202006\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>16 <a class=\"current-post\" href=\"22.html\">Indexed search with Javascript</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>03 <a href=\"21.html\">Character encoding primer</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_202005\">May</label><input type=\"checkbox\" id=\"checkbox_202005\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>27 <a href=\"20.html\">Blogator v1.3 released</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>07 <a href=\"19.html\">Blogator v1.2 released</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_202004\">April</label><input type=\"checkbox\" id=\"checkbox_202004\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>22 <a href=\"18.html\">HDD diagnosis and recovery tools</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_202003\">March</label><input type=\"checkbox\" id=\"checkbox_202003\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>27 <a href=\"17.html\">Coronavirus info and form fetcher script for the French gov. page</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>24 <a href=\"16.html\">A RaspberryPi Git server</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_202002\">February</label><input type=\"checkbox\" id=\"checkbox_202002\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>23 <a href=\"15.html\">CMake Variable Injection</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>14 <a href=\"14.html\">Android upgrade woes</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>11 <a href=\"13.html\">Basics of the Linux terminal and tools</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t</ol>\n"
                             "                    \t\t\t</li>\n"
                             "                    \t\t\t<li><label for=\"checkbox_2019\">2019</label><input type=\"checkbox\" id=\"checkbox_2019\"/>\n"
                             "                    \t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201910\">October</label><input type=\"checkbox\" id=\"checkbox_201910\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>10 <a href=\"12.html\">C++ Resource Acquisition Is Initialization (RAII)</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201908\">August</label><input type=\"checkbox\" id=\"checkbox_201908\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>20 <a href=\"11.html\">Post Mortem: Blogator v1.0</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>13 <a href=\"10.html\">Blogator v1.0 released</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201901\">January</label><input type=\"checkbox\" id=\"checkbox_201901\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>06 <a href=\"9.html\">Terminal plot-graphs with braille characters</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>02 <a href=\"8.html\">Creating bitmaps using braille characters</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t</ol>\n"
                             "                    \t\t\t</li>\n"
                             "                    \t\t\t<li><label for=\"checkbox_2018\">2018</label><input type=\"checkbox\" id=\"checkbox_2018\"/>\n"
                             "                    \t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201811\">November</label><input type=\"checkbox\" id=\"checkbox_201811\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>30 <a href=\"7.html\">Maximum value in a Sliding Window</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201809\">September</label><input type=\"checkbox\" id=\"checkbox_201809\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>11 <a href=\"6.html\">C++ Raw and Smart Pointers</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201808\">August</label><input type=\"checkbox\" id=\"checkbox_201808\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>27 <a href=\"5.html\">Design Pattern: Object Pool</a></li>\n"
                             "                    \t\t\t\t\t\t\t<li>14 <a href=\"4.html\">Design Pattern: Singleton</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201803\">March</label><input type=\"checkbox\" id=\"checkbox_201803\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>18 <a href=\"3.html\">Python package based app structure</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201801\">January</label><input type=\"checkbox\" id=\"checkbox_201801\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>27 <a href=\"2.html\">Working out coordinates using distances</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t</ol>\n"
                             "                    \t\t\t</li>\n"
                             "                    \t\t\t<li><label for=\"checkbox_2017\">2017</label><input type=\"checkbox\" id=\"checkbox_2017\"/>\n"
                             "                    \t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t<li><label for=\"checkbox_201712\">December</label><input type=\"checkbox\" id=\"checkbox_201712\"/>\n"
                             "                    \t\t\t\t\t\t<ol>\n"
                             "                    \t\t\t\t\t\t\t<li>30 <a href=\"1.html\">Arch Linux on a MacBook Pro 2015</a></li>\n"
                             "                    \t\t\t\t\t\t</ol>\n"
                             "                    \t\t\t\t\t</li>\n"
                             "                    \t\t\t\t</ol>\n"
                             "                    \t\t\t</li>\n"
                             "                    \t\t</ol>\n"
                             "                    </div>\n"
                             "                </div>\n"
                             "            </div>\n"
                             "        </div>\n"
                             "\n"
                             "        <footer>\n"
                             "            <div>\n"
                             "                <div>\n"
                             "                    <span class=\"footer-avatar\"><img src=\"../img/kitteh.jpg\" alt=\"logo\"></span>\n"
                             "                    An7ar35, 2018-20\n"
                             "                </div>\n"
                             "            </div>\n"
                             "        </footer>\n"
                             "    </body>\n"
                             "</html>";

    using blogator::dom::DOT;
    using blogator::encoding::encodeToUTF32;

    auto dot = DOT( encodeToUTF32( html ) );

    std::cout << dot << std::endl;

}