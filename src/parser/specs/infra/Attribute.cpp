#include "Attribute.h"

#include <sstream>
#include <unordered_map>

/**
 * Output stream operator
 * @param os Output stream
 * @param attr Attribute enum
 * @return Output stream
 */
std::ostream & blogator::parser::specs::infra::operator <<( std::ostream &os, blogator::parser::specs::infra::Attribute attr ) {
    static const auto map = std::unordered_map<Attribute, std::string>( {
        { Attribute::UNKNOWN, "UNKNOWN" },
        { Attribute::ACCEPT, "accept" },
        { Attribute::ACCEPT_CHARSET, "accept-charset" },
        { Attribute::ACCESSKEY, "accesskey" },
        { Attribute::ACTION, "action" },
        { Attribute::ALT, "alt" },
        { Attribute::ASYNC, "async" },
        { Attribute::AUTOCOMPLETE, "autocomplete" },
        { Attribute::AUTOFOCUS, "autofocus" },
        { Attribute::AUTOPLAY, "autoplay" },
        { Attribute::CHARSET, "charset" },
        { Attribute::CHECKED, "checked" },
        { Attribute::CITE, "cite" },
        { Attribute::CLASS, "class" },
        { Attribute::COLS, "cols" },
        { Attribute::COLSPAN, "colspan" },
        { Attribute::CONTENT, "content" },
        { Attribute::CONTENTEDITABLE, "contenteditable" },
        { Attribute::CONTROLS, "controls" },
        { Attribute::COORDS, "coords" },
        { Attribute::DATA, "data" },
        { Attribute::DATA_X, "data-*" },
        { Attribute::DATETIME, "datetime" },
        { Attribute::DEFAULT, "default" },
        { Attribute::DEFER, "defer" },
        { Attribute::DIR, "dir" },
        { Attribute::DIRNAME, "dirname" },
        { Attribute::DISABLED, "disabled" },
        { Attribute::DOWNLOAD, "download" },
        { Attribute::DRAGGABLE, "draggable" },
        { Attribute::ENCTYPE, "enctype" },
        { Attribute::FOR, "for" },
        { Attribute::FORM, "form" },
        { Attribute::FORMACTION, "formaction" },
        { Attribute::HEADERS, "headers" },
        { Attribute::HEIGHT, "height" },
        { Attribute::HIDDEN, "hidden" },
        { Attribute::HIGH, "high" },
        { Attribute::HREF, "href" },
        { Attribute::HREFLANG, "hreflang" },
        { Attribute::HTTP_EQUIV, "http-equiv" },
        { Attribute::ID, "id" },
        { Attribute::ISMAP, "ismap" },
        { Attribute::KIND, "kind" },
        { Attribute::LABEL, "label" },
        { Attribute::LANG, "lang" },
        { Attribute::LIST, "list" },
        { Attribute::LOOP, "loop" },
        { Attribute::LOW, "low" },
        { Attribute::MAX, "max" },
        { Attribute::MAXLENGTH, "maxlength" },
        { Attribute::MEDIA, "media" },
        { Attribute::METHOD, "method" },
        { Attribute::MIN, "min" },
        { Attribute::MULTIPLE, "multiple" },
        { Attribute::MUTED, "muted" },
        { Attribute::NAME, "name" },
        { Attribute::NOVALIDATE, "novalidate" },
        { Attribute::ONABORT, "onabort" },
        { Attribute::ONAFTERPRINT, "onafterprint" },
        { Attribute::ONBEFOREPRINT, "onbeforeprint" },
        { Attribute::ONBEFOREUNLOAD, "onbeforeunload" },
        { Attribute::ONBLUR, "onblur" },
        { Attribute::ONCANPLAY, "oncanplay" },
        { Attribute::ONCANPLAYTHROUGH, "oncanplaythrough" },
        { Attribute::ONCHANGE, "onchange" },
        { Attribute::ONCLICK, "onclick" },
        { Attribute::ONCONTEXTMENU, "oncontextmenu" },
        { Attribute::ONCOPY, "oncopy" },
        { Attribute::ONCUECHANGE, "oncuechange" },
        { Attribute::ONCUT, "oncut" },
        { Attribute::ONDBLCLICK, "ondblclick" },
        { Attribute::ONDRAG, "ondrag" },
        { Attribute::ONDRAGEND, "ondragend" },
        { Attribute::ONDRAGENTER, "ondragenter" },
        { Attribute::ONDRAGLEAVE, "ondragleave" },
        { Attribute::ONDRAGOVER, "ondragover" },
        { Attribute::ONDRAGSTART, "ondragstart" },
        { Attribute::ONDROP, "ondrop" },
        { Attribute::ONDURATIONCHANGE, "ondurationchange" },
        { Attribute::ONEMPTIED, "onemptied" },
        { Attribute::ONENDED, "onended" },
        { Attribute::ONERROR, "onerror" },
        { Attribute::ONFOCUS, "onfocus" },
        { Attribute::ONHASHCHANGE, "onhashchange" },
        { Attribute::ONINPUT, "oninput" },
        { Attribute::ONINVALID, "oninvalid" },
        { Attribute::ONKEYDOWN, "onkeydown" },
        { Attribute::ONKEYPRESS, "onkeypress" },
        { Attribute::ONKEYUP, "onkeyup" },
        { Attribute::ONLOAD, "onload" },
        { Attribute::ONLOADEDDATA, "onloadeddata" },
        { Attribute::ONLOADEDMETADATA, "onloadedmetadata" },
        { Attribute::ONLOADSTART, "onloadstart" },
        { Attribute::ONMOUSEDOWN, "onmousedown" },
        { Attribute::ONMOUSEMOVE, "onmousemove" },
        { Attribute::ONMOUSEOUT, "onmouseout" },
        { Attribute::ONMOUSEOVER, "onmouseover" },
        { Attribute::ONMOUSEUP, "onmouseup" },
        { Attribute::ONMOUSEWHEEL, "onmousewheel" },
        { Attribute::ONOFFLINE, "onoffline" },
        { Attribute::ONONLINE, "ononline" },
        { Attribute::ONPAGEHIDE, "onpagehide" },
        { Attribute::ONPAGESHOW, "onpageshow" },
        { Attribute::ONPASTE, "onpaste" },
        { Attribute::ONPAUSE, "onpause" },
        { Attribute::ONPLAY, "onplay" },
        { Attribute::ONPLAYING, "onplaying" },
        { Attribute::ONPOPSTATE, "onpopstate" },
        { Attribute::ONPROGRESS, "onprogress" },
        { Attribute::ONRATECHANGE, "onratechange" },
        { Attribute::ONRESET, "onreset" },
        { Attribute::ONRESIZE, "onresize" },
        { Attribute::ONSCROLL, "onscroll" },
        { Attribute::ONSEARCH, "onsearch" },
        { Attribute::ONSEEKED, "onseeked" },
        { Attribute::ONSEEKING, "onseeking" },
        { Attribute::ONSELECT, "onselect" },
        { Attribute::ONSTALLED, "onstalled" },
        { Attribute::ONSTORAGE, "onstorage" },
        { Attribute::ONSUBMIT, "onsubmit" },
        { Attribute::ONSUSPEND, "onsuspend" },
        { Attribute::ONTIMEUPDATE, "ontimeupdate" },
        { Attribute::ONTOGGLE, "ontoggle" },
        { Attribute::ONUNLOAD, "onunload" },
        { Attribute::ONVOLUMECHANGE, "onvolumechange" },
        { Attribute::ONWAITING, "onwaiting" },
        { Attribute::ONWHEEL, "onwheel" },
        { Attribute::OPEN, "open" },
        { Attribute::OPTIMUM, "optimum" },
        { Attribute::PATTERN, "pattern" },
        { Attribute::PLACEHOLDER, "placeholder" },
        { Attribute::POSTER, "poster" },
        { Attribute::PRELOAD, "preload" },
        { Attribute::READONLY, "readonly" },
        { Attribute::REL, "rel" },
        { Attribute::REQUIRED, "required" },
        { Attribute::REVERSED, "reversed" },
        { Attribute::ROWS, "rows" },
        { Attribute::ROWSPAN, "rowspan" },
        { Attribute::SANDBOX, "sandbox" },
        { Attribute::SCOPE, "scope" },
        { Attribute::SELECTED, "selected" },
        { Attribute::SHAPE, "shape" },
        { Attribute::SIZE, "size" },
        { Attribute::SIZES, "sizes" },
        { Attribute::SPAN, "span" },
        { Attribute::SPELLCHECK, "spellcheck" },
        { Attribute::SRC, "src" },
        { Attribute::SRCDOC, "srcdoc" },
        { Attribute::SRCLANG, "srclang" },
        { Attribute::SRCSET, "srcset" },
        { Attribute::START, "start" },
        { Attribute::STEP, "step" },
        { Attribute::STYLE, "style" },
        { Attribute::TABINDEX, "tabindex" },
        { Attribute::TARGET, "target" },
        { Attribute::TITLE, "title" },
        { Attribute::TRANSLATE, "translate" },
        { Attribute::TYPE, "type" },
        { Attribute::USEMAP, "usemap" },
        { Attribute::VALUE, "value" },
        { Attribute::WIDTH, "width" },
        { Attribute::WRAP, "wrap" },
        { Attribute::ARIA_ACTIVEDESCENDANT, "activedescendant" },
        { Attribute::ARIA_ATOMIC, "atomic" },
        { Attribute::ARIA_AUTOCOMPLETE, "autocomplete" },
        { Attribute::ARIA_BUSY, "busy" },
        { Attribute::ARIA_CHECKED, "checked" },
        { Attribute::ARIA_COLCOUNT, "colcount" },
        { Attribute::ARIA_COLINDEX, "colindex" },
        { Attribute::ARIA_COLSPAN, "colspan" },
        { Attribute::ARIA_CONTROLS, "controls" },
        { Attribute::ARIA_CURRENT, "current" },
        { Attribute::ARIA_DESCRIBEDBY, "describedby" },
        { Attribute::ARIA_DETAILS, "details" },
        { Attribute::ARIA_DISABLED, "disabled" },
        { Attribute::ARIA_DROPEFFECT, "dropeffect" },
        { Attribute::ARIA_ERRORMESSAGE, "errormessage" },
        { Attribute::ARIA_FLOWTO, "flowto" },
        { Attribute::ARIA_GRABBED, "grabbed" },
        { Attribute::ARIA_HASPOPUP, "haspopup" },
        { Attribute::ARIA_HIDDEN, "hidden" },
        { Attribute::ARIA_INVALID, "invalid" },
        { Attribute::ARIA_KEYSHORTCUTS, "keyshortcuts" },
        { Attribute::ARIA_LABEL, "label" },
        { Attribute::ARIA_LABELLEDBY, "labelledby" },
        { Attribute::ARIA_LEVEL, "level" },
        { Attribute::ARIA_LIVE, "live" },
        { Attribute::ARIA_MODAL, "modal" },
        { Attribute::ARIA_MULTILINE, "multiline" },
        { Attribute::ARIA_MULTISELECTABLE, "multiselectable" },
        { Attribute::ARIA_ORIENTATION, "orientation" },
        { Attribute::ARIA_OWNS, "owns" },
        { Attribute::ARIA_PLACEHOLDER, "placeholder" },
        { Attribute::ARIA_POSINSET, "posinset" },
        { Attribute::ARIA_PRESSED, "pressed" },
        { Attribute::ARIA_READONLY, "readonly" },
        { Attribute::ARIA_RELEVANT, "relevant" },
        { Attribute::ARIA_REQUIRED, "required" },
        { Attribute::ARIA_ROLEDESCRIPTION, "roledescription" },
        { Attribute::ARIA_ROWCOUNT, "rowcount" },
        { Attribute::ARIA_ROWINDEX, "rowindex" },
        { Attribute::ARIA_ROWSPAN, "rowspan" },
        { Attribute::ARIA_SELECTED, "selected" },
        { Attribute::ARIA_SETSIZE, "setsize" },
        { Attribute::ARIA_SORT, "sort" },
        { Attribute::ARIA_VALUEMAX, "valuemax" },
        { Attribute::ARIA_VALUEMIN, "valuemin" },
        { Attribute::ARIA_VALUENOW, "valuenow" },
        { Attribute::ARIA_VALUETEXT, "valuetext" },
        { Attribute::MATHML_DEFINITIONURL, "definitionURL" },
        { Attribute::SVG_ATTRIBUTENAME, "attributeName" },
        { Attribute::SVG_ATTRIBUTETYPE, "attributeType" },
        { Attribute::SVG_BASEFREQUENCY, "baseFrequency" },
        { Attribute::SVG_BASEPROFILE, "baseProfile" },
        { Attribute::SVG_CALCMODE, "calcMode" },
        { Attribute::SVG_CLIPPATHUNITS, "clipPathUnits" },
        { Attribute::SVG_DIFFUSECONSTANT, "diffuseConstant" },
        { Attribute::SVG_EDGEMODE, "edgeMode" },
        { Attribute::SVG_FILTERUNITS, "filterUnits" },
        { Attribute::SVG_GLYPHREF, "glyphRef" },
        { Attribute::SVG_GRADIENTTRANSFORM, "gradientTransform" },
        { Attribute::SVG_GRADIENTUNITS, "gradientUnits" },
        { Attribute::SVG_KERNELMATRIX, "kernelMatrix" },
        { Attribute::SVG_KERNELUNITLENGTH, "kernelUnitLength" },
        { Attribute::SVG_KEYPOINTS, "keyPoints" },
        { Attribute::SVG_KEYSPLINES, "keySplines" },
        { Attribute::SVG_KEYTIMES, "keyTimes" },
        { Attribute::SVG_LENGTHADJUST, "lengthAdjust" },
        { Attribute::SVG_LIMITINGCONEANGLE, "limitingConeAngle" },
        { Attribute::SVG_MARKERHEIGHT, "markerHeight" },
        { Attribute::SVG_MARKERUNITS, "markerUnits" },
        { Attribute::SVG_MARKERWIDTH, "markerWidth" },
        { Attribute::SVG_MASKCONTENTUNITS, "maskContentUnits" },
        { Attribute::SVG_MASKUNITS, "maskUnits" },
        { Attribute::SVG_NUMOCTAVES, "numOctaves" },
        { Attribute::SVG_PATHLENGTH, "pathLength" },
        { Attribute::SVG_PATTERNCONTENTUNITS, "patternContentUnits" },
        { Attribute::SVG_PATTERNTRANSFORM, "patternTransform" },
        { Attribute::SVG_PATTERNUNITS, "patternUnits" },
        { Attribute::SVG_POINTSATX, "pointsAtX" },
        { Attribute::SVG_POINTSATY, "pointsAtY" },
        { Attribute::SVG_POINTSATZ, "pointsAtZ" },
        { Attribute::SVG_PRESERVEALPHA, "preserveAlpha" },
        { Attribute::SVG_PRESERVEASPECTRATIO, "preserveAspectRatio" },
        { Attribute::SVG_PRIMITIVEUNITS, "primitiveUnits" },
        { Attribute::SVG_REFX, "refX" },
        { Attribute::SVG_REFY, "refY" },
        { Attribute::SVG_REPEATCOUNT, "repeatCount" },
        { Attribute::SVG_REPEATDUR, "repeatDur" },
        { Attribute::SVG_REQUIREDEXTENSIONS, "requiredExtensions" },
        { Attribute::SVG_REQUIREDFEATURES, "requiredFeatures" },
        { Attribute::SVG_SPECULARCONSTANT, "specularConstant" },
        { Attribute::SVG_SPECULAREXPONENT, "specularExponent" },
        { Attribute::SVG_SPREADMETHOD, "spreadMethod" },
        { Attribute::SVG_STARTOFFSET, "startOffset" },
        { Attribute::SVG_STDDEVIATION, "stdDeviation" },
        { Attribute::SVG_STITCHTILES, "stitchTiles" },
        { Attribute::SVG_SURFACESCALE, "surfaceScale" },
        { Attribute::SVG_SYSTEMLANGUAGE, "systemLanguage" },
        { Attribute::SVG_TABLEVALUES, "tableValues" },
        { Attribute::SVG_TARGETX, "targetX" },
        { Attribute::SVG_TARGETY, "targetY" },
        { Attribute::SVG_TEXTLENGTH, "textLength" },
        { Attribute::SVG_VIEWBOX, "viewBox" },
        { Attribute::SVG_VIEWTARGET, "viewTarget" },
        { Attribute::SVG_XCHANNELSELECTOR, "xChannelSelector" },
        { Attribute::SVG_YCHANNELSELECTOR, "yChannelSelector" },
        { Attribute::SVG_ZOOMANDPAN, "zoomAndPan" },
    } );

    if( map.contains( attr ) ) {
        os << map.at( attr );
    } else {
        os << "enum string not found";
    }

    return os;
}

/**
 * Adjusts a MathML attributes
 * @param name Attribute name to adjust
 * @return Adjusted attribute name
 */
std::u32string blogator::parser::specs::infra::adjustMathMLAttribute( const std::u32string &name ) {
    //ref: https://html.spec.whatwg.org/multipage/parsing.html#adjust-mathml-attributes
    static const auto map = std::unordered_map<std::u32string , Attribute>( {
        { U"definitionurl", Attribute::MATHML_DEFINITIONURL }
    } );

    const auto it = map.find( name );

    return ( it == map.end() ? name : blogator::to_u32string( it->second ) );
}

/**
 * Adjusts a SVG attribute
 * @param name Attribute name to adjust
 * @return Adjusted attribute name
 */
std::u32string blogator::parser::specs::infra::adjustSVGAttribute( const std::u32string &name ) {
    //ref: https://html.spec.whatwg.org/multipage/parsing.html#adjust-svg-attributes
    static const auto map = std::unordered_map<std::u32string , Attribute>( {
        { U"attributename", Attribute::SVG_ATTRIBUTENAME },
        { U"attributetype", Attribute::SVG_ATTRIBUTETYPE },
        { U"basefrequency", Attribute::SVG_BASEFREQUENCY },
        { U"baseprofile", Attribute::SVG_BASEPROFILE },
        { U"calcmode", Attribute::SVG_CALCMODE },
        { U"clippathunits", Attribute::SVG_CLIPPATHUNITS },
        { U"diffuseconstant", Attribute::SVG_DIFFUSECONSTANT },
        { U"edgemode", Attribute::SVG_EDGEMODE },
        { U"filterunits", Attribute::SVG_FILTERUNITS },
        { U"glyphref", Attribute::SVG_GLYPHREF },
        { U"gradienttransform", Attribute::SVG_GRADIENTTRANSFORM },
        { U"gradientunits", Attribute::SVG_GRADIENTUNITS },
        { U"kernelmatrix", Attribute::SVG_KERNELMATRIX },
        { U"kernelunitlength", Attribute::SVG_KERNELUNITLENGTH },
        { U"keypoints", Attribute::SVG_KEYPOINTS },
        { U"keysplines", Attribute::SVG_KEYSPLINES },
        { U"keytimes", Attribute::SVG_KEYTIMES },
        { U"lengthadjust", Attribute::SVG_LENGTHADJUST },
        { U"limitingconeangle", Attribute::SVG_LIMITINGCONEANGLE },
        { U"markerheight", Attribute::SVG_MARKERHEIGHT },
        { U"markerunits", Attribute::SVG_MARKERUNITS },
        { U"markerwidth", Attribute::SVG_MARKERWIDTH },
        { U"maskcontentunits", Attribute::SVG_MASKCONTENTUNITS },
        { U"maskunits", Attribute::SVG_MASKUNITS },
        { U"numoctaves", Attribute::SVG_NUMOCTAVES },
        { U"pathlength", Attribute::SVG_PATHLENGTH },
        { U"patterncontentunits", Attribute::SVG_PATTERNCONTENTUNITS },
        { U"patterntransform", Attribute::SVG_PATTERNTRANSFORM },
        { U"patternunits", Attribute::SVG_PATTERNUNITS },
        { U"pointsatx", Attribute::SVG_POINTSATX },
        { U"pointsaty", Attribute::SVG_POINTSATY },
        { U"pointsatz", Attribute::SVG_POINTSATZ },
        { U"preservealpha", Attribute::SVG_PRESERVEALPHA },
        { U"preserveaspectratio", Attribute::SVG_PRESERVEASPECTRATIO },
        { U"primitiveunits", Attribute::SVG_PRIMITIVEUNITS },
        { U"refx", Attribute::SVG_REFX },
        { U"refy", Attribute::SVG_REFY },
        { U"repeatcount", Attribute::SVG_REPEATCOUNT },
        { U"repeatdur", Attribute::SVG_REPEATDUR },
        { U"requiredextensions", Attribute::SVG_REQUIREDEXTENSIONS },
        { U"requiredfeatures", Attribute::SVG_REQUIREDFEATURES },
        { U"specularconstant", Attribute::SVG_SPECULARCONSTANT },
        { U"specularexponent", Attribute::SVG_SPECULAREXPONENT },
        { U"spreadmethod", Attribute::SVG_SPREADMETHOD },
        { U"startoffset", Attribute::SVG_STARTOFFSET },
        { U"stddeviation", Attribute::SVG_STDDEVIATION },
        { U"stitchtiles", Attribute::SVG_STITCHTILES },
        { U"surfacescale", Attribute::SVG_SURFACESCALE },
        { U"systemlanguage", Attribute::SVG_SYSTEMLANGUAGE },
        { U"tablevalues", Attribute::SVG_TABLEVALUES },
        { U"targetx", Attribute::SVG_TARGETX },
        { U"targety", Attribute::SVG_TARGETY },
        { U"textlength", Attribute::SVG_TEXTLENGTH },
        { U"viewbox", Attribute::SVG_VIEWBOX },
        { U"viewtarget", Attribute::SVG_VIEWTARGET },
        { U"xchannelselector", Attribute::SVG_XCHANNELSELECTOR },
        { U"ychannelselector", Attribute::SVG_YCHANNELSELECTOR },
        { U"zoomandpan", Attribute::SVG_ZOOMANDPAN }
    } );

    const auto it = map.find( name );

    return ( it == map.end() ? name : blogator::to_u32string( it->second ) );
}

/**
 * Converts a parser::specs::infra::Attribute enum to a string representation
 * @param attr Attribute enum
 * @return String representation
 */
std::string blogator::to_string( blogator::parser::specs::infra::Attribute attr ) {
    std::stringstream ss;
    ss << attr;
    return ss.str();
}

/**
 * Converts a parser::specs::infra::Attribute enum to a string representation
 * @param attr Attribute enum
 * @return String representation
 */
std::u32string blogator::to_u32string( blogator::parser::specs::infra::Attribute attr ) {
    auto u8str = to_string( attr );
    return { u8str.cbegin(), u8str.cend() };
}
